{
  
    
        "post0": {
            "title": "# backtesting with grid search",
            "content": "# uncomment to install in colab # !pip3 install fastquant . backtest SMAC . fastquant offers a convenient way to backtest several trading strategies. To backtest using Simple Moving Average Crossover (SMAC), we do the following. . backtest(&#39;smac&#39;, dcv_data, fast_period=15, slow_period=40) . fast_period and slow_period are two SMAC parameters that can be changed depending on the user&#39;s preferences. A simple way to fine tune these parameters is to run backtest on a grid of values and find which combination of fast_period and slow_period yields the highest net profit. . First, we fetch JFC&#39;s historical data comprised of date, close price, and volume. . from fastquant import get_stock_data, backtest symbol=&#39;JFC&#39; dcv_data = get_stock_data(symbol, start_date=&#39;2018-01-01&#39;, end_date=&#39;2020-04-28&#39;, format=&#39;cv&#39;, ) dcv_data.head() . 849it [04:08, 4.04it/s] . close volume . dt . 2018-01-03 255.4 | 745780 | . 2018-01-04 255.0 | 617010 | . 2018-01-05 255.0 | 946040 | . 2018-01-08 256.0 | 840630 | . 2018-01-09 255.8 | 978180 | . import matplotlib.pyplot as pl pl.style.use(&quot;default&quot;) . from fastquant import backtest results = backtest(&quot;smac&quot;, dcv_data, fast_period=15, slow_period=40, verbose=False, plot=True ) . ===Global level arguments=== init_cash : 100000 buy_prop : 1 sell_prop : 1 ===Strategy level arguments=== fast_period : 15 slow_period : 40 Final PnL: -31257.65 Time used (seconds): 0.10944700241088867 Optimal parameters: {&#39;init_cash&#39;: 100000, &#39;buy_prop&#39;: 1, &#39;sell_prop&#39;: 1, &#39;execution_type&#39;: &#39;close&#39;, &#39;fast_period&#39;: 15, &#39;slow_period&#39;: 40} Optimal metrics: {&#39;rtot&#39;: -0.37480465562458976, &#39;ravg&#39;: -0.0006645472617457265, &#39;rnorm&#39;: -0.15419454966091925, &#39;rnorm100&#39;: -15.419454966091925, &#39;sharperatio&#39;: -0.9821454406209409, &#39;pnl&#39;: -31257.65, &#39;final_value&#39;: 68742.35499999995} . The plot above is optional. backtest returns a dataframe of parameters and corresponding metrics: . results.head() . init_cash buy_prop sell_prop execution_type fast_period slow_period rtot ravg rnorm rnorm100 sharperatio pnl final_value . 0 100000 | 1 | 1 | close | 15 | 40 | -0.374805 | -0.000665 | -0.154195 | -15.419455 | -0.982145 | -31257.65 | 68742.355 | . define the search space . Second, we specify the range of reasonable values to explore for fast_period and slow_period. Let&#39;s take between 1 and 20 trading days (roughly a month) in steps of 1 day for fast_period, and between 21 and 240 trading days (roughly a year) in steps of 5 days for slow_period. . import numpy as np fast_periods = np.arange(1,20,1, dtype=int) slow_periods = np.arange(20,241,5, dtype=int) # make a grid of 0&#39;s (placeholder) period_grid = np.zeros(shape=(len(fast_periods),len(slow_periods))) period_grid.shape . (19, 45) . run grid search . Third, we run backtest for each iteration over each pair of fast_period and slow_period, saving each time the net profit to the period_grid variable. . Note: Before running backtest over a large grid, try measuring how long it takes your machine to run one backtest instance. . %timeit backtest(...) . In my machine with 8 cores, backtest takes . 101 ms ± 8.3 ms per loop (mean ± std. dev. of 7 runs, 10 loops each) . from time import time init_cash=100000 start_time = time() for i,fast_period in enumerate(fast_periods): for j,slow_period in enumerate(slow_periods): results = backtest(&#39;smac&#39;, dcv_data, fast_period=fast_period, slow_period=slow_period, init_cash=100000, verbose=False, plot=False ) net_profit = results.final_value.values[0]-init_cash period_grid[i,j] = net_profit end_time = time() . time_basic = end_time-start_time print(&quot;Basic grid search took {:.1f} sec&quot;.format(time_basic)) . Basic grid search took 100.4 sec . visualize the period grid . Next, we visualize period_grid as a 2D matrix. . import matplotlib.colors as mcolors import matplotlib.pyplot as pl pl.style.use(&quot;default&quot;) fig, ax = pl.subplots(1,1, figsize=(8,4)) xmin, xmax = slow_periods[0],slow_periods[-1] ymin, ymax = fast_periods[0],fast_periods[-1] #make a diverging color map such that profit&lt;0 is red and blue otherwise cmap = pl.get_cmap(&#39;RdBu&#39;) norm = mcolors.DivergingNorm(vmin=period_grid.min(), vmax = period_grid.max(), vcenter=0 ) #plot matrix cbar = ax.imshow(period_grid, origin=&#39;lower&#39;, interpolation=&#39;none&#39;, extent=[xmin, xmax, ymin, ymax], cmap=cmap, norm=norm ) pl.colorbar(cbar, ax=ax, shrink=0.9, label=&#39;net profit&#39;, orientation=&quot;horizontal&quot;) # search position with highest net profit y, x = np.unravel_index(np.argmax(period_grid), period_grid.shape) best_slow_period = slow_periods[x] best_fast_period = fast_periods[y] # mark position # ax.annotate(f&quot;max profit={period_grid[y, x]:.0f}@({best_slow_period}, {best_fast_period}) days&quot;, # (best_slow_period+5,best_fast_period+1) # ) ax.axvline(best_slow_period, 0, 1, c=&#39;k&#39;, ls=&#39;--&#39;) ax.axhline(best_fast_period+0.5, 0, 1, c=&#39;k&#39;, ls=&#39;--&#39;) # add labels ax.set_aspect(5) pl.setp(ax, xlim=(xmin,xmax), ylim=(ymin,ymax), xlabel=&#39;slow period (days)&#39;, ylabel=&#39;fast period (days)&#39;, title=&#39;JFC w/ SMAC&#39;, ); . print(f&quot;max profit={period_grid[y, x]:.0f} @ ({best_slow_period},{best_fast_period}) days&quot;) . max profit=7042 @ (105,3) days . From the plot above, there are only a few period combinations which we can guarantee non-negative net profit using SMAC strategy. The best result is achieved with (105,30) for period_slow and period_fast, respectively. . In fact SMAC strategy is so bad such that there is only 9% chance it will yield profit when using any random period combinations in our grid, which is smaller than the 12% chance it will yield break even at least. . percent_positive_profit=(period_grid&gt;0).sum()/np.product(period_grid.shape)*100 percent_positive_profit . 9.005847953216374 . percent_breakeven=(period_grid==0).sum()/np.product(period_grid.shape)*100 percent_breakeven . 12.397660818713451 . Anyway, let&#39;s check the results of backtest using the best_fast_period and best_slow_period. . results = backtest(&#39;smac&#39;, dcv_data, fast_period=best_fast_period, slow_period=best_slow_period, verbose=True, plot=True ) net_profit = results.final_value.values[0]-init_cash net_profit . Starting Portfolio Value: 100000.00 ===Global level arguments=== init_cash : 100000 buy_prop : 1 sell_prop : 1 ===Strategy level arguments=== fast_period : 3 slow_period : 105 2018-08-22, BUY CREATE, 286.00 2018-08-22, Cash: 100000.0 2018-08-22, Price: 286.0 2018-08-22, Buy prop size: 346 2018-08-22, Afforded size: 346 2018-08-22, Final size: 346 2018-08-23, BUY EXECUTED, Price: 286.00, Cost: 98956.00, Comm 742.17 2018-09-12, SELL CREATE, 277.00 2018-09-13, SELL EXECUTED, Price: 277.00, Cost: 98956.00, Comm 718.81 2018-09-13, OPERATION PROFIT, GROSS -3114.00, NET -4574.98 2018-10-23, BUY CREATE, 268.00 2018-10-23, Cash: 95425.015 2018-10-23, Price: 268.0 2018-10-23, Buy prop size: 353 2018-10-23, Afforded size: 353 2018-10-23, Final size: 353 2018-10-24, BUY EXECUTED, Price: 268.00, Cost: 94604.00, Comm 709.53 2018-10-25, SELL CREATE, 270.00 2018-10-26, SELL EXECUTED, Price: 270.00, Cost: 94604.00, Comm 714.83 2018-10-26, OPERATION PROFIT, GROSS 706.00, NET -718.36 2018-10-30, BUY CREATE, 264.00 2018-10-30, Cash: 94706.66 2018-10-30, Price: 264.0 2018-10-30, Buy prop size: 355 2018-10-30, Afforded size: 355 2018-10-30, Final size: 355 2018-10-31, BUY EXECUTED, Price: 264.00, Cost: 93720.00, Comm 702.90 2019-04-17, SELL CREATE, 303.00 2019-04-22, SELL EXECUTED, Price: 303.00, Cost: 93720.00, Comm 806.74 2019-04-22, OPERATION PROFIT, GROSS 13845.00, NET 12335.36 Final PnL: 7042.02 ================================================== ************************************************** -- {&#39;init_cash&#39;: 100000, &#39;buy_prop&#39;: 1, &#39;sell_prop&#39;: 1, &#39;execution_type&#39;: &#39;close&#39;, &#39;fast_period&#39;: 3, &#39;slow_period&#39;: 105} OrderedDict([(&#39;rtot&#39;, 0.06805130501900258), (&#39;ravg&#39;, 0.00012065834223227409), (&#39;rnorm&#39;, 0.03087288265827186), (&#39;rnorm100&#39;, 3.087288265827186)]) OrderedDict([(&#39;sharperatio&#39;, 0.7850452330792583)]) Time used (seconds): 0.11643362045288086 Optimal parameters: {&#39;init_cash&#39;: 100000, &#39;buy_prop&#39;: 1, &#39;sell_prop&#39;: 1, &#39;execution_type&#39;: &#39;close&#39;, &#39;fast_period&#39;: 3, &#39;slow_period&#39;: 105} Optimal metrics: {&#39;rtot&#39;: 0.06805130501900258, &#39;ravg&#39;: 0.00012065834223227409, &#39;rnorm&#39;: 0.03087288265827186, &#39;rnorm100&#39;: 3.087288265827186, &#39;sharperatio&#39;: 0.7850452330792583, &#39;pnl&#39;: 7042.02, &#39;final_value&#39;: 107042.0225} . 7042.022500000006 . There are only 6 cross-over events of which only the latest transaction yielded positive gains resulting to a 7% net profit. Is 7% profit over a ~two-year baseline better than the market benchmark? . built-in grid search in fastquant . The good news is backtest provides a built-in grid search if strategy parameters are lists. Let&#39;s re-run backtest with a grid we used above. . from fastquant import backtest start_time = time() results = backtest(&quot;smac&quot;, dcv_data, fast_period=fast_periods, slow_period=slow_periods, verbose=False, plot=False ) end_time = time() time_optimized = end_time-start_time . print(&quot;Optimized grid search took {:.1f} sec&quot;.format(time_optimized)) . Optimized grid search took 95.6 sec . results is automatically ranked based on rnorm which is a proxy for performance. In this case, the best fast_period,slow_period=(8,200) d. . The returned parameters are should have len(fast_periods)xlen(slow_periods) (19x45=855 in this case). . results.shape . (855, 13) . results.head() . init_cash buy_prop sell_prop execution_type fast_period slow_period rtot ravg rnorm rnorm100 sharperatio pnl final_value . 0 100000 | 1 | 1 | close | 3 | 105 | 0.068051 | 0.000121 | 0.030873 | 3.087288 | 0.785045 | 7042.02 | 107042.0225 | . 1 100000 | 1 | 1 | close | 8 | 205 | 0.037052 | 0.000066 | 0.016693 | 1.669276 | 0.085703 | 3774.66 | 103774.6555 | . 2 100000 | 1 | 1 | close | 11 | 170 | 0.037052 | 0.000066 | 0.016693 | 1.669276 | 0.085703 | 3774.66 | 103774.6555 | . 3 100000 | 1 | 1 | close | 8 | 200 | 0.037052 | 0.000066 | 0.016693 | 1.669276 | 0.085703 | 3774.66 | 103774.6555 | . 4 100000 | 1 | 1 | close | 9 | 95 | 0.033320 | 0.000059 | 0.014999 | 1.499897 | 0.092115 | 3388.12 | 103388.1175 | . Now, we recreate the 2D matrix before, but this time using scatter plot. . fig, ax = pl.subplots(1,1, figsize=(8,4)) #make a diverging color map such that profit&lt;0 is red and blue otherwise cmap = pl.get_cmap(&#39;RdBu&#39;) norm = mcolors.DivergingNorm(vmin=period_grid.min(), vmax = period_grid.max(), vcenter=0 ) #plot scatter results[&#39;net_profit&#39;] = results[&#39;final_value&#39;]-results[&#39;init_cash&#39;] df = results[[&#39;slow_period&#39;,&#39;fast_period&#39;,&#39;net_profit&#39;]] ax2 = df.plot.scatter(x=&#39;slow_period&#39;, y=&#39;fast_period&#39;, c=&#39;net_profit&#39;, norm=norm, cmap=cmap, ax=ax ) ymin,ymax = df.fast_period.min(), df.fast_period.max() xmin,xmax = df.slow_period.min(), df.slow_period.max() # best performance (instead of highest profit) best_fast_period, best_slow_period, net_profit = df.loc[0,[&#39;fast_period&#39;,&#39;slow_period&#39;,&#39;net_profit&#39;]] # mark position # ax.annotate(f&quot;max profit={net_profit:.0f}@({best_slow_period}, {best_fast_period}) days&quot;, # (best_slow_period-100,best_fast_period+1), color=&#39;r&#39; # ) ax.axvline(best_slow_period, 0, 1, c=&#39;r&#39;, ls=&#39;--&#39;) ax.axhline(best_fast_period+0.5, 0, 1, c=&#39;r&#39;, ls=&#39;--&#39;) ax.set_aspect(5) pl.setp(ax, xlim=(xmin,xmax), ylim=(ymin,ymax), xlabel=&#39;slow period (days)&#39;, ylabel=&#39;fast period (days)&#39;, title=&#39;JFC w/ SMAC&#39;, ); # fig.colorbar(ax2, orientation=&quot;horizontal&quot;, shrink=0.9, label=&#39;net profit&#39;) . print(f&quot;max profit={net_profit:.0f} @ ({best_slow_period},{best_fast_period}) days&quot;) . max profit=7042 @ (105.0,3.0) days . Note also that built-in grid search in backtest is optimized and slightly faster than the basic loop-based grid search. . #time time_basic/time_optimized . 1.0497938879462785 . Final notes . While it is tempting to do a grid search over larger search space and finer resolutions, it is computationally expensive, inefficient, and prone to overfitting. There are better methods than brute force grid search which we will tackle in the next example. . As an exercise, it is good to try the following: . Use different trading strategies and compare their results | Use a longer data baseline | .",
            "url": "https://enzoampil.github.io/fastquant-blog/grid%20search/backtest/2020/04/20/backtest_with_grid_search.html",
            "relUrl": "/grid%20search/backtest/2020/04/20/backtest_with_grid_search.html",
            "date": " • Apr 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Analyzing PSE disclosures data",
            "content": "# uncomment to install in colab # !pip install -e git+https://github.com/enzoampil/fastquant.git@master#egg=fastquant . from fastquant import DisclosuresPSE . fetching company disclosures . dpse = DisclosuresPSE(symbol=&#39;JFC&#39;, start_date=&#39;1-1-2020&#39;, end_date=&#39;5-1-2020&#39; ) . Pulling JFC disclosures summary... . 0%| | 0/12 [00:00&lt;?, ?it/s] . 1 pages detected! Found 12 disclosures between 1-1-2020 &amp; 5-1-2020 with 4 types: [&#39;Press Release&#39; &#39;Declaration of Cash Dividends&#39; &#39;Material Information/Transactions&#39; &#39;Joint Ventures&#39;] Pulling details in all JFC disclosures... . 100%|██████████| 12/12 [00:09&lt;00:00, 1.21it/s] . Saved: /home/prometheus/github/research/project/fastquant/python/fastquant/data/JFC_disclosures_1-1-2020_5-1-2020.csv . . dpse . DisclosuresPSE(&#39;JFC&#39;, &#39;all&#39;, &#39;1-1-2020&#39;, &#39;5-1-2020&#39;, True, False) . # summary of each disclosure dpse.company_disclosures.head() . Company Name Template Name PSE Form Number Announce Date and Time Circular Number edge_no url . 0 Jollibee Foods Corporation | Press Release | 4-31 | 2020-04-15 07:41:00 | C02771-2020 | 2fd88ba354823b280de8473cebbd6407 | https://edge.pse.com.ph/openDiscViewer.do?edge... | . 1 Jollibee Foods Corporation | Declaration of Cash Dividends | 6-1 | 2020-04-07 10:16:00 | C02610-2020 | 4b9121b34dd8b8e80de8473cebbd6407 | https://edge.pse.com.ph/openDiscViewer.do?edge... | . 2 Jollibee Foods Corporation | Press Release | 4-31 | 2020-03-20 07:16:00 | C02127-2020 | a5df62b1a9558fe60de8473cebbd6407 | https://edge.pse.com.ph/openDiscViewer.do?edge... | . 3 Jollibee Foods Corporation | Press Release | 4-31 | 2020-03-19 07:31:00 | C02092-2020 | 6a7705d00b3e6fb50de8473cebbd6407 | https://edge.pse.com.ph/openDiscViewer.do?edge... | . 4 Jollibee Foods Corporation | Material Information/Transactions | 4-30 | 2020-03-16 12:49:00 | C01925-2020 | 5b6a51f239ad5a6f0de8473cebbd6407 | https://edge.pse.com.ph/openDiscViewer.do?edge... | . # includes details dpse.disclosures_combined.head() . Company Name Template Name PSE Form Number Announce Date and Time Circular Number edge_no url disclosure_table Background/Description of the Disclosure Subject of the Disclosure . 0 Jollibee Foods Corporation | Press Release | 4-31 | 2020-04-15 07:41:00 | C02771-2020 | 2fd88ba354823b280de8473cebbd6407 | https://edge.pse.com.ph/openDiscViewer.do?edge... | {&quot;Title of Each Class&quot;: &quot;Common&quot;, &quot;Subject of ... | JFC Reports 2019 Results Based on Audited Fina... | Press Release: 2019 Audited Financial Results | . 1 Jollibee Foods Corporation | Declaration of Cash Dividends | 6-1 | 2020-04-07 10:16:00 | C02610-2020 | 4b9121b34dd8b8e80de8473cebbd6407 | https://edge.pse.com.ph/openDiscViewer.do?edge... | {&quot;Title of Each Class&quot;: &quot;Common&quot;, &quot;Subject of ... | Jollibee Foods Corporation (JFC) announced tod... | JFC Declares Cash Dividend, Delivery Business ... | . 2 Jollibee Foods Corporation | Press Release | 4-31 | 2020-03-20 07:16:00 | C02127-2020 | a5df62b1a9558fe60de8473cebbd6407 | https://edge.pse.com.ph/openDiscViewer.do?edge... | {&quot;Title of Each Class&quot;: &quot;Common&quot;, &quot;Subject of ... | Jollibee Foods Corporation (JFC) Chairman and ... | Jollibee Group allocates Php1 Billion Emergenc... | . 3 Jollibee Foods Corporation | Press Release | 4-31 | 2020-03-19 07:31:00 | C02092-2020 | 6a7705d00b3e6fb50de8473cebbd6407 | https://edge.pse.com.ph/openDiscViewer.do?edge... | {&quot;Title of Each Class&quot;: &quot;Common&quot;, &quot;Subject of ... | In support of health workers and other frontli... | Jollibee Group Donates Php 100 Million worth o... | . 4 Jollibee Foods Corporation | Material Information/Transactions | 4-30 | 2020-03-16 12:49:00 | C01925-2020 | 5b6a51f239ad5a6f0de8473cebbd6407 | https://edge.pse.com.ph/openDiscViewer.do?edge... | {&quot;Title of Each Class&quot;: &quot;Common&quot;, &quot;Subject of ... | This provides a brief summary for Jollibee Foo... | Risks, Impact on the Business and Mitigation M... | . #get details in each disclosure given edge_no dpse.disclosure_tables[&#39;a5df62b1a9558fe60de8473cebbd6407&#39;].shape . (6, 2) . dpse.disclosures_combined[&#39;Subject of the Disclosure&#39;] . 0 Press Release: 2019 Audited Financial Results 1 JFC Declares Cash Dividend, Delivery Business ... 2 Jollibee Group allocates Php1 Billion Emergenc... 3 Jollibee Group Donates Php 100 Million worth o... 4 Risks, Impact on the Business and Mitigation M... 5 Jollibee Foods Corporation (JFC) and Dim Sum P... 6 Results of the 4th Quarter Unaudited Financial... 7 Press Release: 2019 4th Quarter Financial Results 8 JFC Provides Statement on Business in China 9 JFC to Issue US$600 Million Guaranteed Senior ... 10 JFC to Issue US$600 Million Guaranteed Senior ... 11 JFC Mandates Banks for U.S.$ Senior Guaranteed... Name: Subject of the Disclosure, dtype: object . dpse.disclosures_combined[&#39;Background/Description of the Disclosure&#39;] . 0 JFC Reports 2019 Results Based on Audited Fina... 1 Jollibee Foods Corporation (JFC) announced tod... 2 Jollibee Foods Corporation (JFC) Chairman and ... 3 In support of health workers and other frontli... 4 This provides a brief summary for Jollibee Foo... 5 Golden Plate Pte. Ltd. (GPPL), a wholly owned ... 6 4th Quarter Unaudited Financial Statements for... 7 JFC Same Store Sales Growth Improves, Gains fr... 8 Jollibee Foods Corporation makes the following... 9 Jollibee Foods Corporation (JFC, the “Guaranto... 10 Jollibee Foods Corporation (JFC, the “Guaranto... 11 Jollibee Worldwide Pte. Ltd. (JWPL, the “Issue... Name: Background/Description of the Disclosure, dtype: object . visualization . dpse.disclosure_types . array([&#39;Press Release&#39;, &#39;Declaration of Cash Dividends&#39;, &#39;Material Information/Transactions&#39;, &#39;Joint Ventures&#39;], dtype=object) . #all disclosures superposed with percent change fig = dpse.plot_disclosures() . Pulling JFC stock data... . #all disclosures superposed with close price fig = dpse.plot_disclosures(indicator=&#39;close&#39;, diff=False, percent=False) . filtering disclosures . #disclosures co-incident with max percent change maximum = dpse.filter_disclosures() maximum . Company Name Template Name PSE Form Number Announce Date and Time Circular Number edge_no url disclosure_table Background/Description of the Disclosure Subject of the Disclosure . 5 Jollibee Foods Corporation | [Amend-1]Joint Ventures | 4-22 | 2020-03-13 15:49:00 | C01685-2020 | 21b9a26e7aa00f960de8473cebbd6407 | https://edge.pse.com.ph/openDiscViewer.do?edge... | {&quot;Title of Each Class&quot;: &quot;COMMON&quot;, &quot;Subject of ... | Golden Plate Pte. Ltd. (GPPL), a wholly owned ... | Jollibee Foods Corporation (JFC) and Dim Sum P... | . #disclosures co-incident with min percent change minimum = dpse.filter_disclosures(operation=&#39;min&#39;) minimum . Company Name Template Name PSE Form Number Announce Date and Time Circular Number edge_no url disclosure_table Background/Description of the Disclosure Subject of the Disclosure . 0 Jollibee Foods Corporation | Press Release | 4-31 | 2020-04-15 07:41:00 | C02771-2020 | 2fd88ba354823b280de8473cebbd6407 | https://edge.pse.com.ph/openDiscViewer.do?edge... | {&quot;Title of Each Class&quot;: &quot;Common&quot;, &quot;Subject of ... | JFC Reports 2019 Results Based on Audited Fina... | Press Release: 2019 Audited Financial Results | . #what happened then? maximum[&#39;Background/Description of the Disclosure&#39;].values . array([&#39;Golden Plate Pte. Ltd. (GPPL), a wholly owned subsidiary of JFC, and DSPL executed a Joint Venture Agreement to establish a joint venture company (the “JV”) to be incorporated in the People’s Republic of China (PRC). The JV shall sign a Unit Franchise Agreement with Tim Ho Wan Pte. Ltd. (“Franchisor”), authorized master franchisor of Tim Ho Wan in the Asia-Pacific, to develop and operate Tim Ho Wan stores in Shanghai and such other cities within the PRC as may be agreed with the Franchisor.&#39;], dtype=object) . #details maximum[&#39;Subject of the Disclosure&#39;].values . array([&#39;Jollibee Foods Corporation (JFC) and Dim Sum Pte. Ltd. (DSPL) Signs Agreement to Expand and Operate the Tim Ho Wan Brand in China.&#39;], dtype=object) . #get url maximum[&#39;url&#39;].values . array([&#39;https://edge.pse.com.ph/openDiscViewer.do?edge_no=21b9a26e7aa00f960de8473cebbd6407&#39;], dtype=object) . #what happened during minimum? minimum[&#39;Background/Description of the Disclosure&#39;].values . array([&#39;JFC Reports 2019 Results Based on Audited Financial Statements&#39;], dtype=object) . #details minimum[&#39;Subject of the Disclosure&#39;].values . array([&#39;Press Release: 2019 Audited Financial Results&#39;], dtype=object) . #get url minimum[&#39;url&#39;].values . array([&#39;https://edge.pse.com.ph/openDiscViewer.do?edge_no=2fd88ba354823b280de8473cebbd6407&#39;], dtype=object) . Investagrams disclosures . from fastquant import DisclosuresInvestagrams . dinv = DisclosuresInvestagrams(symbol=&#39;JFC&#39;, from_date=&#39;2018-01-01&#39;, to_date=&#39;2020-04-01&#39;) . dinv.dividends . id time color label Cash Dividends Ex-Date Record Date Payment Date . 0 timediv607 | 2018-04-19 | #0496FF | D | 1.14 | Thu Apr 19, 2018 | Tue Apr 24, 2018 | Wed May 09, 2018 | . 1 timediv786 | 2018-11-21 | #0496FF | D | 1.34 | Wed Nov 21, 2018 | Mon Nov 26, 2018 | Mon Dec 10, 2018 | . 2 timediv934 | 2019-04-23 | #0496FF | D | 1.23 | Tue Apr 23, 2019 | Fri Apr 26, 2019 | Thu May 09, 2019 | . 3 timediv1112 | 2019-11-21 | #0496FF | D | 1.35 | Thu Nov 21, 2019 | Tue Nov 26, 2019 | Tue Dec 10, 2019 | . dinv.earnings . id time color label Total Revenue Net Income EPS Date Period Ending Revenue Unit NI Unit Net Income Amount Net Income YoY Growth (%) . 0 timeearnings4820175 | 2018-04-11 06:26:00 | #DC143C | E | 133.39 | 6.67B (10.23%) | 6.58 | Wed Apr 11, 2018 | Dec 31, 2017 | B | B (%) | 6.67 | 10.23 | . 1 timeearnings4820181 | 2018-05-10 00:32:00 | #DC143C | E | 35.05 | 1.67B (13.14%) | 1.66 | Thu May 10, 2018 | Mar 31, 2018 | B | B (%) | 1.67 | 13.14 | . 2 timeearnings4820182 | 2018-08-14 01:21:00 | #DC143C | E | 40.78 | 2.1B (10.55%) | 2.07 | Tue Aug 14, 2018 | Jun 30, 2018 | B | B (%) | 2.10 | 10.55 | . 3 timeearnings4820183 | 2018-11-12 05:18:00 | #DC143C | E | 40.49 | 1.93B (26.90%) | 1.87 | Mon Nov 12, 2018 | Sep 30, 2018 | B | B (%) | 1.93 | 26.90 | . 4 timeearnings4820185 | 2019-04-11 00:33:00 | #DC143C | E | 164.35 | 7.77B (16.47%) | 7.66 | Thu Apr 11, 2019 | Dec 31, 2018 | B | B (%) | 7.77 | 16.47 | . 5 timeearnings4820191 | 2019-05-15 06:37:00 | #DC143C | E | 40.62 | 1.43B (-14.06%) | 1.41 | Wed May 15, 2019 | Mar 31, 2019 | B | B (-%) | 1.43 | -14.06 | . 6 timeearnings4820192 | 2019-08-05 07:13:00 | #DC143C | E | 44.22 | 985.48M (-53.10%) | 1.03 | Mon Aug 05, 2019 | Jun 30, 2019 | B | M (-%) | 985.48 | -53.10 | . 7 timeearnings4820193 | 2019-11-14 03:46:00 | #DC143C | E | 45.17 | 2.01B (4.48%) | 1.71 | Thu Nov 14, 2019 | Sep 30, 2019 | B | B (%) | 2.01 | 4.48 | .",
            "url": "https://enzoampil.github.io/fastquant-blog/disclosures/2020/04/10/disclosures.html",
            "relUrl": "/disclosures/2020/04/10/disclosures.html",
            "date": " • Apr 10, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Lesson 2: Backtest your trading strategy with only 3 lines of code",
            "content": "#!pip install fastquant . /Users/enzoampil/quant/fastquant . fastquant Lesson 2 - Backtest your trading strategy with only 3 lines of code . fastquant package Updates . get_stock_data has been added, which now includes all Yahoo Finance data (on top of PSE) | backtest function is now ready to use! | README has been updated to reflect the above | Setup . Google Colab (limitted plotting) | Jupyter notebook (complete plotting) | Google Colab Lesson 2 link . Colab notebook on this link . How to use Jupyter notebooks . 1. Go to your terminal and install jupyter . pip3 install jupyter . 2. Clone fastquant . git clone https://github.com/enzoampil/fastquant.git . cd fastquant . 3. Run jupyter . jupyter notebook . 4. Open lesson at lessons/fastquant_lesson2_backtest_your_trading_strategy.ipynb . Recap from Lesson 1 . Plot Closing Stock Prices . from matplotlib import pyplot as plt from fastquant import backtest, get_stock_data %matplotlib inline jfc = get_stock_data(&quot;JFC&quot;, &quot;2018-01-01&quot;, &quot;2019-01-01&quot;) jfc.close.plot(figsize=(10, 6)) plt.title(&quot;Daily Closing Prices of JFC nfrom 2018-01-01 to 2019-01-01&quot;, fontsize=20) . Reading cached file found: JFC_2018-01-01_2019-01-01.csv . Text(0.5, 1.0, &#39;Daily Closing Prices of JFC nfrom 2018-01-01 to 2019-01-01&#39;) . Analyze with a simple moving average (SMA) trading strategy . In this section, we will attempt to visually assess the performance of a SMA crossover strategy. There are many ways to do this strategy, but we will go with a “price crossover” approach with a 30 day SMA. . In this case, it’s considered a “buy” signal when the closing price crosses the simple moving average from below, and considered a “sell” signal when the closing price crosses the simple moving average from above. . So how do we know our SMA price crossover strategy is effective? Visually, we can assess this by seeing if the “sell” signal happens right before the stock price starts going down, and if the “buy” signal happens right before the stock price starts going up. . import pandas as pd ma30 = jfc.close.rolling(30).mean() close_ma30 = pd.concat([jfc.close, ma30], axis=1).dropna() close_ma30.columns = [&#39;Closing Price&#39;, &#39;Simple Moving Average (30 day)&#39;] close_ma30.plot(figsize=(10, 6)) plt.title(&quot;Daily Closing Prices vs 30 day SMA of JFC nfrom 2018-01-01 to 2019-01-01&quot;, fontsize=20) . Text(0.5, 1.0, &#39;Daily Closing Prices vs 30 day SMA of JFC nfrom 2018-01-01 to 2019-01-01&#39;) . Lesson 2: Backtesting with fastquant . Backtest your trading strategy in 3 lines of code . Now, let&#39;s get started with backtesting! . Below, I show how you can use fastquant to backtest a simple moving average crossover (similar to what we have above). . The three steps are: . Import the backtest and get_pse_data functions from fastquant | from fastquant import backtest, get_stock_data . Get stock data in a date, close, volume format (DCV) | Here, we get DCV (date, closing, volume) data from JFC using the get_pse_data function . jfc = get_stock_data(&quot;JFC&quot;, &quot;2018-01-01&quot;, &quot;2019-01-01&quot;) . Reading cached file found: JFC_2018-01-01_2019-01-01.csv . jfc . dt close volume . 0 2018-01-03 | 255.4 | 745780 | . 1 2018-01-04 | 255.0 | 617010 | . 2 2018-01-05 | 255.0 | 946040 | . 3 2018-01-08 | 256.0 | 840630 | . 4 2018-01-09 | 255.8 | 978180 | . ... ... | ... | ... | . 238 2018-12-20 | 303.0 | 659480 | . 239 2018-12-21 | 302.4 | 715510 | . 240 2018-12-26 | 292.0 | 1087620 | . 241 2018-12-27 | 295.0 | 585760 | . 242 2018-12-28 | 291.8 | 425440 | . 243 rows × 3 columns . Backtest a simple moving average crossover (smac) strategy on the JFC data | We perform the backtest using a 15 day moving average as the &quot;fast&quot; moving average, and a 35 day moving average as the &quot;slow&quot; moving average. If we want to change these parameter values, we can just replace the numbers in the backtest function. . We call these the strategy level arguments since they are unique to a specific strategy. . Do note that by default, the backtesting algorithm assumes that you start out with PHP 100,000 as cash (init_cash), while using all of that cash during a buy signal (buy_prop), and selling all of your current stock holdings during a sell signal (sell_prop). We call these the global level arguments since they can be shared across companies. . %matplotlib backtest(&#39;smac&#39;, jfc, fast_period=15, slow_period=35) . Using matplotlib backend: MacOSX Starting Portfolio Value: 100000.00 ===Global level arguments=== init_cash : 100000 buy_prop : 1 sell_prop : 1 ===Strategy level arguments=== fast_period : 15 slow_period : 35 2018-08-06, BUY CREATE, 280.00 2018-08-06, Cash: 100000.0 2018-08-06, Price: 280.0 2018-08-06, Buy prop size: 354 2018-08-06, Afforded size: 354 2018-08-06, Final size: 354 2018-08-07, BUY EXECUTED, Price: 280.00, Cost: 99120.00, Comm 743.40 2018-09-20, SELL CREATE, 272.00 2018-09-21, SELL EXECUTED, Price: 272.00, Cost: 99120.00, Comm 722.16 2018-09-21, OPERATION PROFIT, GROSS -2832.00, NET -4297.56 2018-10-31, BUY CREATE, 276.00 2018-10-31, Cash: 95702.44 2018-10-31, Price: 276.0 2018-10-31, Buy prop size: 343 2018-10-31, Afforded size: 343 2018-10-31, Final size: 343 2018-11-05, BUY EXECUTED, Price: 276.00, Cost: 94668.00, Comm 710.01 Final Portfolio Value: 100411.83 . Customize strategy parameters . The idea of backtesting is that we should choose the best strategy based on which one has worked best over time. . %matplotlib backtest(&#39;smac&#39;, jfc, fast_period=1, slow_period=30) . Using matplotlib backend: MacOSX Starting Portfolio Value: 100000.00 ===Global level arguments=== init_cash : 100000 buy_prop : 1 sell_prop : 1 ===Strategy level arguments=== fast_period : 1 slow_period : 30 2018-02-26, BUY CREATE, 292.00 2018-02-26, Cash: 100000.0 2018-02-26, Price: 292.0 2018-02-26, Buy prop size: 339 2018-02-26, Afforded size: 339 2018-02-26, Final size: 339 2018-02-27, BUY EXECUTED, Price: 292.00, Cost: 98988.00, Comm 742.41 2018-03-14, SELL CREATE, 284.00 2018-03-15, SELL EXECUTED, Price: 284.00, Cost: 98988.00, Comm 722.07 2018-03-15, OPERATION PROFIT, GROSS -2712.00, NET -4176.48 2018-03-16, BUY CREATE, 305.40 2018-03-16, Cash: 95823.51999999999 2018-03-16, Price: 305.4 2018-03-16, Buy prop size: 311 2018-03-16, Afforded size: 311 2018-03-16, Final size: 311 2018-03-19, BUY EXECUTED, Price: 305.40, Cost: 94979.40, Comm 712.35 2018-03-20, SELL CREATE, 285.00 2018-03-21, SELL EXECUTED, Price: 285.00, Cost: 94979.40, Comm 664.76 2018-03-21, OPERATION PROFIT, GROSS -6344.40, NET -7721.51 2018-03-26, BUY CREATE, 295.00 2018-03-26, Cash: 88102.012 2018-03-26, Price: 295.0 2018-03-26, Buy prop size: 296 2018-03-26, Afforded size: 296 2018-03-26, Final size: 296 2018-03-27, BUY EXECUTED, Price: 295.00, Cost: 87320.00, Comm 654.90 2018-04-04, SELL CREATE, 280.00 2018-04-05, SELL EXECUTED, Price: 280.00, Cost: 87320.00, Comm 621.60 2018-04-05, OPERATION PROFIT, GROSS -4440.00, NET -5716.50 2018-04-12, BUY CREATE, 300.00 2018-04-12, Cash: 82385.512 2018-04-12, Price: 300.0 2018-04-12, Buy prop size: 272 2018-04-12, Afforded size: 272 2018-04-12, Final size: 272 2018-04-13, BUY EXECUTED, Price: 300.00, Cost: 81600.00, Comm 612.00 2018-04-13, SELL CREATE, 291.60 2018-04-16, SELL EXECUTED, Price: 291.60, Cost: 81600.00, Comm 594.86 2018-04-16, OPERATION PROFIT, GROSS -2284.80, NET -3491.66 2018-04-18, BUY CREATE, 294.20 2018-04-18, Cash: 78893.84800000001 2018-04-18, Price: 294.2 2018-04-18, Buy prop size: 265 2018-04-18, Afforded size: 265 2018-04-18, Final size: 265 2018-04-19, BUY EXECUTED, Price: 294.20, Cost: 77963.00, Comm 584.72 2018-04-19, SELL CREATE, 291.00 2018-04-20, SELL EXECUTED, Price: 291.00, Cost: 77963.00, Comm 578.36 2018-04-20, OPERATION PROFIT, GROSS -848.00, NET -2011.08 2018-04-23, BUY CREATE, 294.00 2018-04-23, Cash: 76882.763 2018-04-23, Price: 294.0 2018-04-23, Buy prop size: 259 2018-04-23, Afforded size: 259 2018-04-23, Final size: 259 2018-04-24, BUY EXECUTED, Price: 294.00, Cost: 76146.00, Comm 571.09 2018-04-24, SELL CREATE, 281.60 2018-04-25, SELL EXECUTED, Price: 281.60, Cost: 76146.00, Comm 547.01 2018-04-25, OPERATION PROFIT, GROSS -3211.60, NET -4329.70 2018-05-16, BUY CREATE, 286.60 2018-05-16, Cash: 72553.06000000001 2018-05-16, Price: 286.6 2018-05-16, Buy prop size: 251 2018-05-16, Afforded size: 251 2018-05-16, Final size: 251 2018-05-17, BUY EXECUTED, Price: 286.60, Cost: 71936.60, Comm 539.52 2018-05-17, SELL CREATE, 285.00 2018-05-18, SELL EXECUTED, Price: 285.00, Cost: 71936.60, Comm 536.51 2018-05-18, OPERATION PROFIT, GROSS -401.60, NET -1477.64 2018-05-18, BUY CREATE, 285.00 2018-05-18, Cash: 71075.42300000001 2018-05-18, Price: 285.0 2018-05-18, Buy prop size: 247 2018-05-18, Afforded size: 247 2018-05-18, Final size: 247 2018-05-21, BUY EXECUTED, Price: 285.00, Cost: 70395.00, Comm 527.96 2018-05-21, SELL CREATE, 284.00 2018-05-22, SELL EXECUTED, Price: 284.00, Cost: 70395.00, Comm 526.11 2018-05-22, OPERATION PROFIT, GROSS -247.00, NET -1301.07 2018-05-23, BUY CREATE, 287.00 2018-05-23, Cash: 69774.35050000002 2018-05-23, Price: 287.0 2018-05-23, Buy prop size: 241 2018-05-23, Afforded size: 241 2018-05-23, Final size: 241 2018-05-24, BUY EXECUTED, Price: 287.00, Cost: 69167.00, Comm 518.75 2018-05-24, SELL CREATE, 281.20 2018-05-25, SELL EXECUTED, Price: 281.20, Cost: 69167.00, Comm 508.27 2018-05-25, OPERATION PROFIT, GROSS -1397.80, NET -2424.82 2018-06-01, BUY CREATE, 283.80 2018-06-01, Cash: 67349.52900000001 2018-06-01, Price: 283.8 2018-06-01, Buy prop size: 235 2018-06-01, Afforded size: 235 2018-06-01, Final size: 235 2018-06-04, BUY EXECUTED, Price: 283.80, Cost: 66693.00, Comm 500.20 2018-06-04, SELL CREATE, 280.20 2018-06-05, SELL EXECUTED, Price: 280.20, Cost: 66693.00, Comm 493.85 2018-06-05, OPERATION PROFIT, GROSS -846.00, NET -1840.05 2018-06-07, BUY CREATE, 282.60 2018-06-07, Cash: 65509.479000000014 2018-06-07, Price: 282.6 2018-06-07, Buy prop size: 229 2018-06-07, Afforded size: 229 2018-06-07, Final size: 229 2018-06-08, BUY EXECUTED, Price: 282.60, Cost: 64715.40, Comm 485.37 2018-06-13, SELL CREATE, 279.20 2018-06-14, SELL EXECUTED, Price: 279.20, Cost: 64715.40, Comm 479.53 2018-06-14, OPERATION PROFIT, GROSS -778.60, NET -1743.49 2018-06-19, BUY CREATE, 284.00 2018-06-19, Cash: 63765.98750000001 2018-06-19, Price: 284.0 2018-06-19, Buy prop size: 222 2018-06-19, Afforded size: 222 2018-06-19, Final size: 222 2018-06-20, BUY EXECUTED, Price: 284.00, Cost: 63048.00, Comm 472.86 2018-06-20, SELL CREATE, 270.00 2018-06-21, SELL EXECUTED, Price: 270.00, Cost: 63048.00, Comm 449.55 2018-06-21, OPERATION PROFIT, GROSS -3108.00, NET -4030.41 2018-07-27, BUY CREATE, 266.00 2018-07-27, Cash: 59735.57750000001 2018-07-27, Price: 266.0 2018-07-27, Buy prop size: 222 2018-07-27, Afforded size: 222 2018-07-27, Final size: 222 2018-07-30, BUY EXECUTED, Price: 266.00, Cost: 59052.00, Comm 442.89 2018-09-06, SELL CREATE, 281.00 2018-09-07, SELL EXECUTED, Price: 281.00, Cost: 59052.00, Comm 467.87 2018-09-07, OPERATION PROFIT, GROSS 3330.00, NET 2419.24 2018-09-07, BUY CREATE, 281.00 2018-09-07, Cash: 62154.82250000001 2018-09-07, Price: 281.0 2018-09-07, Buy prop size: 219 2018-09-07, Afforded size: 219 2018-09-07, Final size: 219 2018-09-10, BUY EXECUTED, Price: 281.00, Cost: 61539.00, Comm 461.54 2018-09-11, SELL CREATE, 269.00 2018-09-12, SELL EXECUTED, Price: 269.00, Cost: 61539.00, Comm 441.83 2018-09-12, OPERATION PROFIT, GROSS -2628.00, NET -3531.38 2018-10-19, BUY CREATE, 265.00 2018-10-19, Cash: 58623.44750000001 2018-10-19, Price: 265.0 2018-10-19, Buy prop size: 219 2018-10-19, Afforded size: 219 2018-10-19, Final size: 219 2018-10-22, BUY EXECUTED, Price: 265.00, Cost: 58035.00, Comm 435.26 Final Portfolio Value: 64057.39 . %matplotlib backtest(&#39;smac&#39;, jfc, fast_period=30, slow_period=50) . Using matplotlib backend: MacOSX Starting Portfolio Value: 100000.00 ===Global level arguments=== init_cash : 100000 buy_prop : 1 sell_prop : 1 ===Strategy level arguments=== fast_period : 30 slow_period : 50 2018-08-23, BUY CREATE, 293.00 2018-08-23, Cash: 100000.0 2018-08-23, Price: 293.0 2018-08-23, Buy prop size: 338 2018-08-23, Afforded size: 338 2018-08-23, Final size: 338 2018-08-24, BUY EXECUTED, Price: 293.00, Cost: 99034.00, Comm 742.75 2018-10-05, SELL CREATE, 243.00 2018-10-08, SELL EXECUTED, Price: 243.00, Cost: 99034.00, Comm 616.00 2018-10-08, OPERATION PROFIT, GROSS -16900.00, NET -18258.76 2018-11-19, BUY CREATE, 282.00 2018-11-19, Cash: 81741.23999999999 2018-11-19, Price: 282.0 2018-11-19, Buy prop size: 287 2018-11-19, Afforded size: 287 2018-11-19, Final size: 287 2018-11-20, BUY EXECUTED, Price: 282.00, Cost: 80934.00, Comm 607.00 Final Portfolio Value: 83946.83 . We can conclude that across all the parameter combinations we&#39;ve tried, the best performing one is the one where fast_period = 15, while slow_period = 40. . %matplotlib backtest(&#39;smac&#39;, jfc, fast_period=15, slow_period=40) . Using matplotlib backend: MacOSX Starting Portfolio Value: 100000.00 ===Global level arguments=== init_cash : 100000 buy_prop : 1 sell_prop : 1 ===Strategy level arguments=== fast_period : 15 slow_period : 40 2018-08-07, BUY CREATE, 270.00 2018-08-07, Cash: 100000.0 2018-08-07, Price: 270.0 2018-08-07, Buy prop size: 367 2018-08-07, Afforded size: 367 2018-08-07, Final size: 367 2018-08-08, BUY EXECUTED, Price: 270.00, Cost: 99090.00, Comm 743.17 2018-09-21, SELL CREATE, 271.00 2018-09-24, SELL EXECUTED, Price: 271.00, Cost: 99090.00, Comm 745.93 2018-09-24, OPERATION PROFIT, GROSS 367.00, NET -1122.10 2018-11-05, BUY CREATE, 280.00 2018-11-05, Cash: 98877.89749999999 2018-11-05, Price: 280.0 2018-11-05, Buy prop size: 350 2018-11-05, Afforded size: 350 2018-11-05, Final size: 350 2018-11-06, BUY EXECUTED, Price: 280.00, Cost: 98000.00, Comm 735.00 Final Portfolio Value: 102272.90 . Relevant resources . Medium article | Backtrader repo | How to contribute more trading strategies . Checkout fastquant/strategies.py . New strategies can be added with as little as 20 lines of code (excluding docs) | Please let me know if you&#39;re intrested in contributing! :) | Happy to walk you through the process personally, still in the process of writing a tutorial | Planning to add the following TA strategies next: . SMAC [DONE] | RSI [DONE] | Bollinger Bands | Moving Average Convergence Divergence | EMAC (exponential moving average crossover) | On-Balance-Volume | Ichimoku Kinko Hyo | Average Directional Index | Parabolic Stop and Reverse (SAR) | Stochastic | For advanced DS peeps who want to go straight into ML based indicators, I also encourage you to contribute! . Next webinar - Lecture 3: Relative Strength Index (Theory + backtesting) .",
            "url": "https://enzoampil.github.io/fastquant-blog/strategies/lesson/2020/03/09/lesson2-backtest-your-trading-strategy.html",
            "relUrl": "/strategies/lesson/2020/03/09/lesson2-backtest-your-trading-strategy.html",
            "date": " • Mar 9, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Lesson 1: Basic Stock Price Analysis on Jollibee Food Corp. (JFC)",
            "content": "fastquant lesson 1 . Introduction to fastquant . fastquant is a python package that allows you easily access stock data with as few as 2 lines of python code. . Its goal is to promote data driven investments by making quantitative analysis in finance accessible to everyone. . Objectives and strategies . 1) Raise awareness, and guide beginners to get a sufficient foundation by teaching the basics of quant analysis with lectures presented via blog posts &amp; online lectures . 2) Make quant analysis simple and easy w/ a high level python API that allows for lower level configuration for more advanced users - development of an easy to use python package to facilitate data driven investments . Top down approach to lectures and package design . We start w/ immediate usefulness and then work towards “deep” understanding later as more experience is gained. This approach will be reflected in the design of the blog posts, lectures, and the fastquant package. . Expect 1 - 2 lessons per month . medium article + notebook -&gt; webinar . Medium article + notebook takes 1-2 weeks, while webinar will take 1-2 weeks. So the pace will generally be 1-2 webinars per month. . Webinars will be recorded and posted as content on facebook/youtube. . Course Outline (Part 1) - Backtesting Classic Technical Analysis Indicators . 1. Lecture 1: Accessing PSE data in 3 lines of code 1. Accessing PSE data in 3 lines of code 2. Plotting a basic SMAC strategy 3. The idea of backtesting 2. Lecture 2: Backtest your trading strategy with 5 lines of code 3. Lecture 3: Relative Strength Index (Intro + backtesting) 4. Lecture 4: Bollinger Bands (Intro + backtesting) 5. Lecture 5: Moving Average Convergence Divergence (Intro + backtesting) 6. Lecture 6: Backtesting multiple strategies at the same time . Course Outline (Part 2) [TBD] - Building Advanced Indicators w/ Statistics &amp; Machine Learning based Approaches + other financial indicators . Setup . 1. Let&#39;s make sure everyone gets Google Colab working 2. Show github and encourage people to make an account (if they want to contribute to fastquant). 3. Please star the repo if you find it useful! :) . Installation . Installing fastquant is super simple since it&#39;s on pypi! . !pip3 install fastquant . Collecting fastquant Downloading https://files.pythonhosted.org/packages/8b/4f/392ad2117711ed868789c9fc3a183f6079b5eabcac7e286b78651f8ac8ab/fastquant-0.1.3.14-py3-none-any.whl (5.0MB) |████████████████████████████████| 5.0MB 693kB/s eta 0:00:01 Requirement already satisfied: numpy==1.18.0 in /usr/local/lib/python3.7/site-packages (from fastquant) (1.18.0) Requirement already satisfied: pre-commit in /usr/local/lib/python3.7/site-packages (from fastquant) (2.4.0) Requirement already satisfied: pandas==1.0.3 in /usr/local/lib/python3.7/site-packages (from fastquant) (1.0.3) Requirement already satisfied: python-dateutil==2.8.1 in /usr/local/lib/python3.7/site-packages (from fastquant) (2.8.1) Requirement already satisfied: backtrader==1.9.75.123 in /usr/local/lib/python3.7/site-packages (from fastquant) (1.9.75.123) Requirement already satisfied: urllib3==1.25.7 in /usr/local/lib/python3.7/site-packages (from fastquant) (1.25.7) Requirement already satisfied: six==1.13.0 in /usr/local/lib/python3.7/site-packages (from fastquant) (1.13.0) Requirement already satisfied: pytz==2019.3 in /usr/local/lib/python3.7/site-packages (from fastquant) (2019.3) Requirement already satisfied: black==19.10b0 in /usr/local/lib/python3.7/site-packages (from fastquant) (19.10b0) Requirement already satisfied: oauthlib==3.1.0 in /usr/local/lib/python3.7/site-packages (from fastquant) (3.1.0) Requirement already satisfied: chardet==3.0.4 in /usr/local/lib/python3.7/site-packages (from fastquant) (3.0.4) Requirement already satisfied: matplotlib==3.1.2 in /usr/local/lib/python3.7/site-packages (from fastquant) (3.1.2) Requirement already satisfied: lxml==4.4.2 in /usr/local/lib/python3.7/site-packages (from fastquant) (4.4.2) Requirement already satisfied: tqdm==4.28.1 in /usr/local/lib/python3.7/site-packages (from fastquant) (4.28.1) Requirement already satisfied: requests-oauthlib==1.3.0 in /usr/local/lib/python3.7/site-packages (from fastquant) (1.3.0) Requirement already satisfied: idna==2.8 in /usr/local/lib/python3.7/site-packages (from fastquant) (2.8) Requirement already satisfied: yfinance==0.1.54 in /usr/local/lib/python3.7/site-packages (from fastquant) (0.1.54) Requirement already satisfied: beautifulsoup4==4.8.2 in /usr/local/lib/python3.7/site-packages (from fastquant) (4.8.2) Requirement already satisfied: PySocks==1.7.1 in /usr/local/lib/python3.7/site-packages (from fastquant) (1.7.1) Requirement already satisfied: certifi==2019.11.28 in /usr/local/lib/python3.7/site-packages (from fastquant) (2019.11.28) Requirement already satisfied: bs4==0.0.1 in /usr/local/lib/python3.7/site-packages (from fastquant) (0.0.1) Requirement already satisfied: soupsieve==1.9.5 in /usr/local/lib/python3.7/site-packages (from fastquant) (1.9.5) Requirement already satisfied: tweepy==3.8.0 in /usr/local/lib/python3.7/site-packages (from fastquant) (3.8.0) Requirement already satisfied: networkx==2.4 in /usr/local/lib/python3.7/site-packages (from fastquant) (2.4) Requirement already satisfied: requests==2.22.0 in /usr/local/lib/python3.7/site-packages (from fastquant) (2.22.0) Requirement already satisfied: identify&gt;=1.0.0 in /usr/local/lib/python3.7/site-packages (from pre-commit-&gt;fastquant) (1.4.18) Requirement already satisfied: nodeenv&gt;=0.11.1 in /usr/local/lib/python3.7/site-packages (from pre-commit-&gt;fastquant) (1.3.5) Requirement already satisfied: pyyaml&gt;=5.1 in /usr/local/lib/python3.7/site-packages (from pre-commit-&gt;fastquant) (5.3.1) Requirement already satisfied: virtualenv&gt;=20.0.8 in /usr/local/lib/python3.7/site-packages (from pre-commit-&gt;fastquant) (20.0.21) Requirement already satisfied: cfgv&gt;=2.0.0 in /usr/local/lib/python3.7/site-packages (from pre-commit-&gt;fastquant) (3.1.0) Requirement already satisfied: importlib-metadata; python_version &lt; &#34;3.8&#34; in /usr/local/lib/python3.7/site-packages (from pre-commit-&gt;fastquant) (1.6.0) Requirement already satisfied: toml in /usr/local/lib/python3.7/site-packages (from pre-commit-&gt;fastquant) (0.10.1) Requirement already satisfied: appdirs in /usr/local/lib/python3.7/site-packages (from black==19.10b0-&gt;fastquant) (1.4.4) Requirement already satisfied: regex in /usr/local/lib/python3.7/site-packages (from black==19.10b0-&gt;fastquant) (2020.5.14) Requirement already satisfied: click&gt;=6.5 in /usr/local/lib/python3.7/site-packages (from black==19.10b0-&gt;fastquant) (7.1.2) Requirement already satisfied: attrs&gt;=18.1.0 in /usr/local/lib/python3.7/site-packages (from black==19.10b0-&gt;fastquant) (19.3.0) Requirement already satisfied: typed-ast&gt;=1.4.0 in /usr/local/lib/python3.7/site-packages (from black==19.10b0-&gt;fastquant) (1.4.1) Requirement already satisfied: pathspec&lt;1,&gt;=0.6 in /usr/local/lib/python3.7/site-packages (from black==19.10b0-&gt;fastquant) (0.8.0) Requirement already satisfied: cycler&gt;=0.10 in /usr/local/lib/python3.7/site-packages (from matplotlib==3.1.2-&gt;fastquant) (0.10.0) Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,&gt;=2.0.1 in /usr/local/lib/python3.7/site-packages (from matplotlib==3.1.2-&gt;fastquant) (2.4.7) Requirement already satisfied: kiwisolver&gt;=1.0.1 in /usr/local/lib/python3.7/site-packages (from matplotlib==3.1.2-&gt;fastquant) (1.2.0) Requirement already satisfied: multitasking&gt;=0.0.7 in /usr/local/lib/python3.7/site-packages (from yfinance==0.1.54-&gt;fastquant) (0.0.9) Requirement already satisfied: decorator&gt;=4.3.0 in /usr/local/lib/python3.7/site-packages (from networkx==2.4-&gt;fastquant) (4.4.2) Requirement already satisfied: distlib&lt;1,&gt;=0.3.0 in /usr/local/lib/python3.7/site-packages (from virtualenv&gt;=20.0.8-&gt;pre-commit-&gt;fastquant) (0.3.0) Requirement already satisfied: filelock&lt;4,&gt;=3.0.0 in /usr/local/lib/python3.7/site-packages (from virtualenv&gt;=20.0.8-&gt;pre-commit-&gt;fastquant) (3.0.12) Requirement already satisfied: zipp&gt;=0.5 in /usr/local/lib/python3.7/site-packages (from importlib-metadata; python_version &lt; &#34;3.8&#34;-&gt;pre-commit-&gt;fastquant) (3.1.0) Installing collected packages: fastquant Successfully installed fastquant-0.1.3.14 . Get stock data from stock in 2 lines of code! . Here I demonstrate how to get the stock data of Jollibee (JFC is the stock symbol) from January 1, 2018 to January 1, 2019. . Please ensure that your date strings are in the format YYYY-MM-DD. . You can find a list of company names and PSE stock symbols here, and Yahoo Finance symbols here . from fastquant import get_stock_data df = get_stock_data(&#39;JFC&#39;, &#39;2018-01-01&#39;, &#39;2019-01-01&#39;) df.head() . close . dt . 2018-01-03 255.4 | . 2018-01-04 255.0 | . 2018-01-05 255.0 | . 2018-01-08 256.0 | . 2018-01-09 255.8 | . help(get_stock_data) . Help on function get_stock_data in module fastquant.fastquant: get_stock_data(symbol, start_date, end_date, source=&#39;phisix&#39;, format=&#39;c&#39;) Returns pricing data for a specified stock and source. Parameters - symbol : str Symbol of the stock in the PSE or Yahoo. You can refer to these links: PHISIX: https://www.pesobility.com/stock YAHOO: https://www.nasdaq.com/market-activity/stocks/screener?exchange=nasdaq start_date : str Starting date (YYYY-MM-DD) of the period that you want to get data on end_date : str Ending date (YYYY-MM-DD) of the period you want to get data on source : str First source to query from (&#34;pse&#34;, &#34;yahoo&#34;). If the stock is not found in the first source, the query is run on the other source. format : str Format of the output data Returns - pandas.DataFrame Stock data (in the specified `format`) for the specified company and date range . Plot daily closing prices . For this part, we&#39;ll want to import a plotting package, matplotlib, to be able to visualize the closing prices of Jollibee. Don&#39;t worry if you don&#39;t understand how this works - for now, just take the code as is. . from matplotlib import pyplot as plt df.close.plot(figsize=(10, 6)) plt.title(&quot;Daily Closing Prices of JFC nfrom 2018-01-01 to 2019-01-01&quot;, fontsize=20) . Text(0.5, 1.0, &#39;Daily Closing Prices of JFC nfrom 2018-01-01 to 2019-01-01&#39;) . Analyze with a simple moving average crossover (SMAC) trading strategy . Now that we have the data ready, let&#39;s visualize a sample SMAC strategy. . First, let&#39;s import the pandas library (general purpose library for handling tabular data). . import pandas as pd . Next, we calculate the 30 day moving average of Jollibee&#39;s closing price and combine it with the original closing price data. . ma30 = df.close.rolling(30).mean() close_ma30 = pd.concat([df.close, ma30], axis=1).dropna() close_ma30.columns = [&#39;Closing Price&#39;, &#39;Simple Moving Average (30 day)&#39;] . ma30.dropna() . dt 2018-02-13 276.586667 2018-02-14 277.340000 2018-02-15 278.340000 2018-02-19 279.340000 2018-02-20 280.340000 ... 2018-12-20 287.446667 2018-12-21 288.193333 2018-12-26 288.660000 2018-12-27 289.360000 2018-12-28 289.993333 Name: close, Length: 214, dtype: float64 . ma30.dropna().plot(figsize=(10, 6)) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x114e25890&gt; . Lastly, we plot the trends for the daily closing prices and the 30 day SMA together . close_ma30.plot(figsize=(10, 6)) plt.title(&quot;Daily Closing Prices vs 30 day SMA of JFC nfrom 2018-01-01 to 2019-01-01&quot;, fontsize=20) . Text(0.5, 1.0, &#39;Daily Closing Prices vs 30 day SMA of JFC nfrom 2018-01-01 to 2019-01-01&#39;) . Relevant resources . Access Philippine Stock Data with Only 2 Lines of Python | Technical analysis basics from investopedia | My Learning Plan for Getting Into Data Science from Scratch | Thank you! .",
            "url": "https://enzoampil.github.io/fastquant-blog/data/lesson/2020/01/26/lesson1-accessing-pse_data.html",
            "relUrl": "/data/lesson/2020/01/26/lesson1-accessing-pse_data.html",
            "date": " • Jan 26, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About fastquant",
          "content": "Mission . To give everyone the ability to make data driven investment decisions. . Objectives . 1) Raise awareness, and guide beginners to get a sufficient foundation by teaching the basics of quant analysis with lessons &amp; tutorials presented via blog posts &amp; online lectures . 2) Make quant analysis simple and easy w/ a high level python API that allows for lower level configuration for more advanced users - development of an easy to use python package to facilitate data driven investments .",
          "url": "https://enzoampil.github.io/fastquant-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://enzoampil.github.io/fastquant-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}